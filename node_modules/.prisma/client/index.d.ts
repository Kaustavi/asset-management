
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model HardwareSystem
 * 
 */
export type HardwareSystem = $Result.DefaultSelection<Prisma.$HardwareSystemPayload>
/**
 * Model Records
 * 
 */
export type Records = $Result.DefaultSelection<Prisma.$RecordsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Teams: {
  FRONTEND: 'FRONTEND',
  BACKEND: 'BACKEND',
  QA: 'QA',
  MARKETING: 'MARKETING',
  DESIGN: 'DESIGN'
};

export type Teams = (typeof Teams)[keyof typeof Teams]


export const HardwareTypes: {
  MOBILE: 'MOBILE',
  WATCH: 'WATCH',
  IMAC: 'IMAC',
  MAC_MINI: 'MAC_MINI',
  LAPTOP: 'LAPTOP'
};

export type HardwareTypes = (typeof HardwareTypes)[keyof typeof HardwareTypes]

}

export type Teams = $Enums.Teams

export const Teams: typeof $Enums.Teams

export type HardwareTypes = $Enums.HardwareTypes

export const HardwareTypes: typeof $Enums.HardwareTypes

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Employees
 * const employees = await prisma.employee.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Employees
   * const employees = await prisma.employee.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs>;

  /**
   * `prisma.hardwareSystem`: Exposes CRUD operations for the **HardwareSystem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HardwareSystems
    * const hardwareSystems = await prisma.hardwareSystem.findMany()
    * ```
    */
  get hardwareSystem(): Prisma.HardwareSystemDelegate<ExtArgs>;

  /**
   * `prisma.records`: Exposes CRUD operations for the **Records** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Records
    * const records = await prisma.records.findMany()
    * ```
    */
  get records(): Prisma.RecordsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Employee: 'Employee',
    HardwareSystem: 'HardwareSystem',
    Records: 'Records'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'employee' | 'hardwareSystem' | 'records'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>,
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      HardwareSystem: {
        payload: Prisma.$HardwareSystemPayload<ExtArgs>
        fields: Prisma.HardwareSystemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HardwareSystemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HardwareSystemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload>
          }
          findFirst: {
            args: Prisma.HardwareSystemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HardwareSystemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload>
          }
          findMany: {
            args: Prisma.HardwareSystemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload>[]
          }
          create: {
            args: Prisma.HardwareSystemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload>
          }
          createMany: {
            args: Prisma.HardwareSystemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HardwareSystemCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload>[]
          }
          delete: {
            args: Prisma.HardwareSystemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload>
          }
          update: {
            args: Prisma.HardwareSystemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload>
          }
          deleteMany: {
            args: Prisma.HardwareSystemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HardwareSystemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HardwareSystemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HardwareSystemPayload>
          }
          aggregate: {
            args: Prisma.HardwareSystemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHardwareSystem>
          }
          groupBy: {
            args: Prisma.HardwareSystemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HardwareSystemGroupByOutputType>[]
          }
          count: {
            args: Prisma.HardwareSystemCountArgs<ExtArgs>,
            result: $Utils.Optional<HardwareSystemCountAggregateOutputType> | number
          }
        }
      }
      Records: {
        payload: Prisma.$RecordsPayload<ExtArgs>
        fields: Prisma.RecordsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecordsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecordsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload>
          }
          findFirst: {
            args: Prisma.RecordsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecordsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload>
          }
          findMany: {
            args: Prisma.RecordsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload>[]
          }
          create: {
            args: Prisma.RecordsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload>
          }
          createMany: {
            args: Prisma.RecordsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecordsCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload>[]
          }
          delete: {
            args: Prisma.RecordsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload>
          }
          update: {
            args: Prisma.RecordsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload>
          }
          deleteMany: {
            args: Prisma.RecordsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecordsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecordsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecordsPayload>
          }
          aggregate: {
            args: Prisma.RecordsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecords>
          }
          groupBy: {
            args: Prisma.RecordsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecordsGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecordsCountArgs<ExtArgs>,
            result: $Utils.Optional<RecordsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    assigned_item: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assigned_item?: boolean | EmployeeCountOutputTypeCountAssigned_itemArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountAssigned_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HardwareSystemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    phone_no: string | null
    name: string | null
    team: $Enums.Teams | null
    status: boolean | null
    access_token: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    phone_no: string | null
    name: string | null
    team: $Enums.Teams | null
    status: boolean | null
    access_token: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    email: number
    password: number
    phone_no: number
    name: number
    team: number
    status: number
    access_token: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type EmployeeMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    phone_no?: true
    name?: true
    team?: true
    status?: true
    access_token?: true
    created_at?: true
    updated_at?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    phone_no?: true
    name?: true
    team?: true
    status?: true
    access_token?: true
    created_at?: true
    updated_at?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    phone_no?: true
    name?: true
    team?: true
    status?: true
    access_token?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: string
    email: string
    password: string
    phone_no: string
    name: string
    team: $Enums.Teams
    status: boolean
    access_token: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    phone_no?: boolean
    name?: boolean
    team?: boolean
    status?: boolean
    access_token?: boolean
    created_at?: boolean
    updated_at?: boolean
    assigned_item?: boolean | Employee$assigned_itemArgs<ExtArgs>
    records?: boolean | Employee$recordsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    phone_no?: boolean
    name?: boolean
    team?: boolean
    status?: boolean
    access_token?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assigned_item?: boolean | Employee$assigned_itemArgs<ExtArgs>
    records?: boolean | Employee$recordsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      assigned_item: Prisma.$HardwareSystemPayload<ExtArgs>[]
      records: Prisma.$RecordsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      phone_no: string
      name: string
      team: $Enums.Teams
      status: boolean
      access_token: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }


  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmployeeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmployeeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmployeeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
    **/
    create<T extends EmployeeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends EmployeeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
    **/
    delete<T extends EmployeeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmployeeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmployeeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmployeeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
    **/
    upsert<T extends EmployeeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    assigned_item<T extends Employee$assigned_itemArgs<ExtArgs> = {}>(args?: Subset<T, Employee$assigned_itemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'findMany'> | Null>;

    records<T extends Employee$recordsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$recordsArgs<ExtArgs>>): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Employee model
   */ 
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'String'>
    readonly email: FieldRef<"Employee", 'String'>
    readonly password: FieldRef<"Employee", 'String'>
    readonly phone_no: FieldRef<"Employee", 'String'>
    readonly name: FieldRef<"Employee", 'String'>
    readonly team: FieldRef<"Employee", 'Teams'>
    readonly status: FieldRef<"Employee", 'Boolean'>
    readonly access_token: FieldRef<"Employee", 'String'>
    readonly created_at: FieldRef<"Employee", 'DateTime'>
    readonly updated_at: FieldRef<"Employee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee.assigned_item
   */
  export type Employee$assigned_itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    where?: HardwareSystemWhereInput
    orderBy?: HardwareSystemOrderByWithRelationInput | HardwareSystemOrderByWithRelationInput[]
    cursor?: HardwareSystemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HardwareSystemScalarFieldEnum | HardwareSystemScalarFieldEnum[]
  }

  /**
   * Employee.records
   */
  export type Employee$recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    where?: RecordsWhereInput
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model HardwareSystem
   */

  export type AggregateHardwareSystem = {
    _count: HardwareSystemCountAggregateOutputType | null
    _min: HardwareSystemMinAggregateOutputType | null
    _max: HardwareSystemMaxAggregateOutputType | null
  }

  export type HardwareSystemMinAggregateOutputType = {
    id: string | null
    name: string | null
    descriptions: string | null
    type: $Enums.HardwareTypes | null
    serial_num: string | null
    assign_id: string | null
    assignee_by_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type HardwareSystemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    descriptions: string | null
    type: $Enums.HardwareTypes | null
    serial_num: string | null
    assign_id: string | null
    assignee_by_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type HardwareSystemCountAggregateOutputType = {
    id: number
    name: number
    descriptions: number
    type: number
    serial_num: number
    assign_id: number
    assignee_by_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type HardwareSystemMinAggregateInputType = {
    id?: true
    name?: true
    descriptions?: true
    type?: true
    serial_num?: true
    assign_id?: true
    assignee_by_id?: true
    created_at?: true
    updated_at?: true
  }

  export type HardwareSystemMaxAggregateInputType = {
    id?: true
    name?: true
    descriptions?: true
    type?: true
    serial_num?: true
    assign_id?: true
    assignee_by_id?: true
    created_at?: true
    updated_at?: true
  }

  export type HardwareSystemCountAggregateInputType = {
    id?: true
    name?: true
    descriptions?: true
    type?: true
    serial_num?: true
    assign_id?: true
    assignee_by_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type HardwareSystemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HardwareSystem to aggregate.
     */
    where?: HardwareSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardwareSystems to fetch.
     */
    orderBy?: HardwareSystemOrderByWithRelationInput | HardwareSystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HardwareSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardwareSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardwareSystems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HardwareSystems
    **/
    _count?: true | HardwareSystemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HardwareSystemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HardwareSystemMaxAggregateInputType
  }

  export type GetHardwareSystemAggregateType<T extends HardwareSystemAggregateArgs> = {
        [P in keyof T & keyof AggregateHardwareSystem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHardwareSystem[P]>
      : GetScalarType<T[P], AggregateHardwareSystem[P]>
  }




  export type HardwareSystemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HardwareSystemWhereInput
    orderBy?: HardwareSystemOrderByWithAggregationInput | HardwareSystemOrderByWithAggregationInput[]
    by: HardwareSystemScalarFieldEnum[] | HardwareSystemScalarFieldEnum
    having?: HardwareSystemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HardwareSystemCountAggregateInputType | true
    _min?: HardwareSystemMinAggregateInputType
    _max?: HardwareSystemMaxAggregateInputType
  }

  export type HardwareSystemGroupByOutputType = {
    id: string
    name: string
    descriptions: string
    type: $Enums.HardwareTypes
    serial_num: string
    assign_id: string
    assignee_by_id: string
    created_at: Date | null
    updated_at: Date | null
    _count: HardwareSystemCountAggregateOutputType | null
    _min: HardwareSystemMinAggregateOutputType | null
    _max: HardwareSystemMaxAggregateOutputType | null
  }

  type GetHardwareSystemGroupByPayload<T extends HardwareSystemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HardwareSystemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HardwareSystemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HardwareSystemGroupByOutputType[P]>
            : GetScalarType<T[P], HardwareSystemGroupByOutputType[P]>
        }
      >
    >


  export type HardwareSystemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    descriptions?: boolean
    type?: boolean
    serial_num?: boolean
    assign_id?: boolean
    assignee_by_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    assignee?: boolean | EmployeeDefaultArgs<ExtArgs>
    records?: boolean | HardwareSystem$recordsArgs<ExtArgs>
  }, ExtArgs["result"]["hardwareSystem"]>

  export type HardwareSystemSelectScalar = {
    id?: boolean
    name?: boolean
    descriptions?: boolean
    type?: boolean
    serial_num?: boolean
    assign_id?: boolean
    assignee_by_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type HardwareSystemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | EmployeeDefaultArgs<ExtArgs>
    records?: boolean | HardwareSystem$recordsArgs<ExtArgs>
  }


  export type $HardwareSystemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HardwareSystem"
    objects: {
      assignee: Prisma.$EmployeePayload<ExtArgs>
      records: Prisma.$RecordsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      descriptions: string
      type: $Enums.HardwareTypes
      serial_num: string
      assign_id: string
      assignee_by_id: string
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["hardwareSystem"]>
    composites: {}
  }


  type HardwareSystemGetPayload<S extends boolean | null | undefined | HardwareSystemDefaultArgs> = $Result.GetResult<Prisma.$HardwareSystemPayload, S>

  type HardwareSystemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HardwareSystemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HardwareSystemCountAggregateInputType | true
    }

  export interface HardwareSystemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HardwareSystem'], meta: { name: 'HardwareSystem' } }
    /**
     * Find zero or one HardwareSystem that matches the filter.
     * @param {HardwareSystemFindUniqueArgs} args - Arguments to find a HardwareSystem
     * @example
     * // Get one HardwareSystem
     * const hardwareSystem = await prisma.hardwareSystem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HardwareSystemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HardwareSystemFindUniqueArgs<ExtArgs>>
    ): Prisma__HardwareSystemClient<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HardwareSystem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HardwareSystemFindUniqueOrThrowArgs} args - Arguments to find a HardwareSystem
     * @example
     * // Get one HardwareSystem
     * const hardwareSystem = await prisma.hardwareSystem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HardwareSystemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HardwareSystemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HardwareSystemClient<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HardwareSystem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareSystemFindFirstArgs} args - Arguments to find a HardwareSystem
     * @example
     * // Get one HardwareSystem
     * const hardwareSystem = await prisma.hardwareSystem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HardwareSystemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HardwareSystemFindFirstArgs<ExtArgs>>
    ): Prisma__HardwareSystemClient<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HardwareSystem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareSystemFindFirstOrThrowArgs} args - Arguments to find a HardwareSystem
     * @example
     * // Get one HardwareSystem
     * const hardwareSystem = await prisma.hardwareSystem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HardwareSystemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HardwareSystemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HardwareSystemClient<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HardwareSystems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareSystemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HardwareSystems
     * const hardwareSystems = await prisma.hardwareSystem.findMany()
     * 
     * // Get first 10 HardwareSystems
     * const hardwareSystems = await prisma.hardwareSystem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hardwareSystemWithIdOnly = await prisma.hardwareSystem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HardwareSystemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HardwareSystemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HardwareSystem.
     * @param {HardwareSystemCreateArgs} args - Arguments to create a HardwareSystem.
     * @example
     * // Create one HardwareSystem
     * const HardwareSystem = await prisma.hardwareSystem.create({
     *   data: {
     *     // ... data to create a HardwareSystem
     *   }
     * })
     * 
    **/
    create<T extends HardwareSystemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HardwareSystemCreateArgs<ExtArgs>>
    ): Prisma__HardwareSystemClient<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HardwareSystems.
     * @param {HardwareSystemCreateManyArgs} args - Arguments to create many HardwareSystems.
     * @example
     * // Create many HardwareSystems
     * const hardwareSystem = await prisma.hardwareSystem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends HardwareSystemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HardwareSystemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HardwareSystems and returns the data saved in the database.
     * @param {HardwareSystemCreateManyAndReturnArgs} args - Arguments to create many HardwareSystems.
     * @example
     * // Create many HardwareSystems
     * const hardwareSystem = await prisma.hardwareSystem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HardwareSystems and only return the `id`
     * const hardwareSystemWithIdOnly = await prisma.hardwareSystem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends HardwareSystemCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, HardwareSystemCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a HardwareSystem.
     * @param {HardwareSystemDeleteArgs} args - Arguments to delete one HardwareSystem.
     * @example
     * // Delete one HardwareSystem
     * const HardwareSystem = await prisma.hardwareSystem.delete({
     *   where: {
     *     // ... filter to delete one HardwareSystem
     *   }
     * })
     * 
    **/
    delete<T extends HardwareSystemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HardwareSystemDeleteArgs<ExtArgs>>
    ): Prisma__HardwareSystemClient<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HardwareSystem.
     * @param {HardwareSystemUpdateArgs} args - Arguments to update one HardwareSystem.
     * @example
     * // Update one HardwareSystem
     * const hardwareSystem = await prisma.hardwareSystem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HardwareSystemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HardwareSystemUpdateArgs<ExtArgs>>
    ): Prisma__HardwareSystemClient<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HardwareSystems.
     * @param {HardwareSystemDeleteManyArgs} args - Arguments to filter HardwareSystems to delete.
     * @example
     * // Delete a few HardwareSystems
     * const { count } = await prisma.hardwareSystem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HardwareSystemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HardwareSystemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HardwareSystems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareSystemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HardwareSystems
     * const hardwareSystem = await prisma.hardwareSystem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HardwareSystemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HardwareSystemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HardwareSystem.
     * @param {HardwareSystemUpsertArgs} args - Arguments to update or create a HardwareSystem.
     * @example
     * // Update or create a HardwareSystem
     * const hardwareSystem = await prisma.hardwareSystem.upsert({
     *   create: {
     *     // ... data to create a HardwareSystem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HardwareSystem we want to update
     *   }
     * })
    **/
    upsert<T extends HardwareSystemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HardwareSystemUpsertArgs<ExtArgs>>
    ): Prisma__HardwareSystemClient<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HardwareSystems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareSystemCountArgs} args - Arguments to filter HardwareSystems to count.
     * @example
     * // Count the number of HardwareSystems
     * const count = await prisma.hardwareSystem.count({
     *   where: {
     *     // ... the filter for the HardwareSystems we want to count
     *   }
     * })
    **/
    count<T extends HardwareSystemCountArgs>(
      args?: Subset<T, HardwareSystemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HardwareSystemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HardwareSystem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareSystemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HardwareSystemAggregateArgs>(args: Subset<T, HardwareSystemAggregateArgs>): Prisma.PrismaPromise<GetHardwareSystemAggregateType<T>>

    /**
     * Group by HardwareSystem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HardwareSystemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HardwareSystemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HardwareSystemGroupByArgs['orderBy'] }
        : { orderBy?: HardwareSystemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HardwareSystemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHardwareSystemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HardwareSystem model
   */
  readonly fields: HardwareSystemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HardwareSystem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HardwareSystemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    assignee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    records<T extends HardwareSystem$recordsArgs<ExtArgs> = {}>(args?: Subset<T, HardwareSystem$recordsArgs<ExtArgs>>): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HardwareSystem model
   */ 
  interface HardwareSystemFieldRefs {
    readonly id: FieldRef<"HardwareSystem", 'String'>
    readonly name: FieldRef<"HardwareSystem", 'String'>
    readonly descriptions: FieldRef<"HardwareSystem", 'String'>
    readonly type: FieldRef<"HardwareSystem", 'HardwareTypes'>
    readonly serial_num: FieldRef<"HardwareSystem", 'String'>
    readonly assign_id: FieldRef<"HardwareSystem", 'String'>
    readonly assignee_by_id: FieldRef<"HardwareSystem", 'String'>
    readonly created_at: FieldRef<"HardwareSystem", 'DateTime'>
    readonly updated_at: FieldRef<"HardwareSystem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HardwareSystem findUnique
   */
  export type HardwareSystemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareSystem to fetch.
     */
    where: HardwareSystemWhereUniqueInput
  }

  /**
   * HardwareSystem findUniqueOrThrow
   */
  export type HardwareSystemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareSystem to fetch.
     */
    where: HardwareSystemWhereUniqueInput
  }

  /**
   * HardwareSystem findFirst
   */
  export type HardwareSystemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareSystem to fetch.
     */
    where?: HardwareSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardwareSystems to fetch.
     */
    orderBy?: HardwareSystemOrderByWithRelationInput | HardwareSystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HardwareSystems.
     */
    cursor?: HardwareSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardwareSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardwareSystems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HardwareSystems.
     */
    distinct?: HardwareSystemScalarFieldEnum | HardwareSystemScalarFieldEnum[]
  }

  /**
   * HardwareSystem findFirstOrThrow
   */
  export type HardwareSystemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareSystem to fetch.
     */
    where?: HardwareSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardwareSystems to fetch.
     */
    orderBy?: HardwareSystemOrderByWithRelationInput | HardwareSystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HardwareSystems.
     */
    cursor?: HardwareSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardwareSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardwareSystems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HardwareSystems.
     */
    distinct?: HardwareSystemScalarFieldEnum | HardwareSystemScalarFieldEnum[]
  }

  /**
   * HardwareSystem findMany
   */
  export type HardwareSystemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * Filter, which HardwareSystems to fetch.
     */
    where?: HardwareSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HardwareSystems to fetch.
     */
    orderBy?: HardwareSystemOrderByWithRelationInput | HardwareSystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HardwareSystems.
     */
    cursor?: HardwareSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HardwareSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HardwareSystems.
     */
    skip?: number
    distinct?: HardwareSystemScalarFieldEnum | HardwareSystemScalarFieldEnum[]
  }

  /**
   * HardwareSystem create
   */
  export type HardwareSystemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * The data needed to create a HardwareSystem.
     */
    data: XOR<HardwareSystemCreateInput, HardwareSystemUncheckedCreateInput>
  }

  /**
   * HardwareSystem createMany
   */
  export type HardwareSystemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HardwareSystems.
     */
    data: HardwareSystemCreateManyInput | HardwareSystemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HardwareSystem createManyAndReturn
   */
  export type HardwareSystemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * The data used to create many HardwareSystems.
     */
    data: HardwareSystemCreateManyInput | HardwareSystemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HardwareSystem update
   */
  export type HardwareSystemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * The data needed to update a HardwareSystem.
     */
    data: XOR<HardwareSystemUpdateInput, HardwareSystemUncheckedUpdateInput>
    /**
     * Choose, which HardwareSystem to update.
     */
    where: HardwareSystemWhereUniqueInput
  }

  /**
   * HardwareSystem updateMany
   */
  export type HardwareSystemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HardwareSystems.
     */
    data: XOR<HardwareSystemUpdateManyMutationInput, HardwareSystemUncheckedUpdateManyInput>
    /**
     * Filter which HardwareSystems to update
     */
    where?: HardwareSystemWhereInput
  }

  /**
   * HardwareSystem upsert
   */
  export type HardwareSystemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * The filter to search for the HardwareSystem to update in case it exists.
     */
    where: HardwareSystemWhereUniqueInput
    /**
     * In case the HardwareSystem found by the `where` argument doesn't exist, create a new HardwareSystem with this data.
     */
    create: XOR<HardwareSystemCreateInput, HardwareSystemUncheckedCreateInput>
    /**
     * In case the HardwareSystem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HardwareSystemUpdateInput, HardwareSystemUncheckedUpdateInput>
  }

  /**
   * HardwareSystem delete
   */
  export type HardwareSystemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
    /**
     * Filter which HardwareSystem to delete.
     */
    where: HardwareSystemWhereUniqueInput
  }

  /**
   * HardwareSystem deleteMany
   */
  export type HardwareSystemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HardwareSystems to delete
     */
    where?: HardwareSystemWhereInput
  }

  /**
   * HardwareSystem.records
   */
  export type HardwareSystem$recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    where?: RecordsWhereInput
  }

  /**
   * HardwareSystem without action
   */
  export type HardwareSystemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HardwareSystem
     */
    select?: HardwareSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HardwareSystemInclude<ExtArgs> | null
  }


  /**
   * Model Records
   */

  export type AggregateRecords = {
    _count: RecordsCountAggregateOutputType | null
    _min: RecordsMinAggregateOutputType | null
    _max: RecordsMaxAggregateOutputType | null
  }

  export type RecordsMinAggregateOutputType = {
    id: string | null
    assignee_by_id: string | null
    system_id: string | null
  }

  export type RecordsMaxAggregateOutputType = {
    id: string | null
    assignee_by_id: string | null
    system_id: string | null
  }

  export type RecordsCountAggregateOutputType = {
    id: number
    assignee_by_id: number
    system_id: number
    _all: number
  }


  export type RecordsMinAggregateInputType = {
    id?: true
    assignee_by_id?: true
    system_id?: true
  }

  export type RecordsMaxAggregateInputType = {
    id?: true
    assignee_by_id?: true
    system_id?: true
  }

  export type RecordsCountAggregateInputType = {
    id?: true
    assignee_by_id?: true
    system_id?: true
    _all?: true
  }

  export type RecordsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Records to aggregate.
     */
    where?: RecordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordsOrderByWithRelationInput | RecordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Records
    **/
    _count?: true | RecordsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecordsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecordsMaxAggregateInputType
  }

  export type GetRecordsAggregateType<T extends RecordsAggregateArgs> = {
        [P in keyof T & keyof AggregateRecords]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecords[P]>
      : GetScalarType<T[P], AggregateRecords[P]>
  }




  export type RecordsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecordsWhereInput
    orderBy?: RecordsOrderByWithAggregationInput | RecordsOrderByWithAggregationInput[]
    by: RecordsScalarFieldEnum[] | RecordsScalarFieldEnum
    having?: RecordsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecordsCountAggregateInputType | true
    _min?: RecordsMinAggregateInputType
    _max?: RecordsMaxAggregateInputType
  }

  export type RecordsGroupByOutputType = {
    id: string
    assignee_by_id: string
    system_id: string
    _count: RecordsCountAggregateOutputType | null
    _min: RecordsMinAggregateOutputType | null
    _max: RecordsMaxAggregateOutputType | null
  }

  type GetRecordsGroupByPayload<T extends RecordsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecordsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecordsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecordsGroupByOutputType[P]>
            : GetScalarType<T[P], RecordsGroupByOutputType[P]>
        }
      >
    >


  export type RecordsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignee_by_id?: boolean
    system_id?: boolean
    assignee?: boolean | EmployeeDefaultArgs<ExtArgs>
    HardwareSystem?: boolean | HardwareSystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records"]>

  export type RecordsSelectScalar = {
    id?: boolean
    assignee_by_id?: boolean
    system_id?: boolean
  }


  export type RecordsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | EmployeeDefaultArgs<ExtArgs>
    HardwareSystem?: boolean | HardwareSystemDefaultArgs<ExtArgs>
  }


  export type $RecordsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Records"
    objects: {
      assignee: Prisma.$EmployeePayload<ExtArgs>
      HardwareSystem: Prisma.$HardwareSystemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assignee_by_id: string
      system_id: string
    }, ExtArgs["result"]["records"]>
    composites: {}
  }


  type RecordsGetPayload<S extends boolean | null | undefined | RecordsDefaultArgs> = $Result.GetResult<Prisma.$RecordsPayload, S>

  type RecordsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecordsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecordsCountAggregateInputType | true
    }

  export interface RecordsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Records'], meta: { name: 'Records' } }
    /**
     * Find zero or one Records that matches the filter.
     * @param {RecordsFindUniqueArgs} args - Arguments to find a Records
     * @example
     * // Get one Records
     * const records = await prisma.records.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecordsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RecordsFindUniqueArgs<ExtArgs>>
    ): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Records that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecordsFindUniqueOrThrowArgs} args - Arguments to find a Records
     * @example
     * // Get one Records
     * const records = await prisma.records.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecordsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordsFindFirstArgs} args - Arguments to find a Records
     * @example
     * // Get one Records
     * const records = await prisma.records.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecordsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordsFindFirstArgs<ExtArgs>>
    ): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Records that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordsFindFirstOrThrowArgs} args - Arguments to find a Records
     * @example
     * // Get one Records
     * const records = await prisma.records.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecordsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Records
     * const records = await prisma.records.findMany()
     * 
     * // Get first 10 Records
     * const records = await prisma.records.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recordsWithIdOnly = await prisma.records.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecordsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Records.
     * @param {RecordsCreateArgs} args - Arguments to create a Records.
     * @example
     * // Create one Records
     * const Records = await prisma.records.create({
     *   data: {
     *     // ... data to create a Records
     *   }
     * })
     * 
    **/
    create<T extends RecordsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecordsCreateArgs<ExtArgs>>
    ): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Records.
     * @param {RecordsCreateManyArgs} args - Arguments to create many Records.
     * @example
     * // Create many Records
     * const records = await prisma.records.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RecordsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Records and returns the data saved in the database.
     * @param {RecordsCreateManyAndReturnArgs} args - Arguments to create many Records.
     * @example
     * // Create many Records
     * const records = await prisma.records.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Records and only return the `id`
     * const recordsWithIdOnly = await prisma.records.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends RecordsCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordsCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Records.
     * @param {RecordsDeleteArgs} args - Arguments to delete one Records.
     * @example
     * // Delete one Records
     * const Records = await prisma.records.delete({
     *   where: {
     *     // ... filter to delete one Records
     *   }
     * })
     * 
    **/
    delete<T extends RecordsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecordsDeleteArgs<ExtArgs>>
    ): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Records.
     * @param {RecordsUpdateArgs} args - Arguments to update one Records.
     * @example
     * // Update one Records
     * const records = await prisma.records.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecordsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecordsUpdateArgs<ExtArgs>>
    ): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Records.
     * @param {RecordsDeleteManyArgs} args - Arguments to filter Records to delete.
     * @example
     * // Delete a few Records
     * const { count } = await prisma.records.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecordsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecordsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Records
     * const records = await prisma.records.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecordsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecordsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Records.
     * @param {RecordsUpsertArgs} args - Arguments to update or create a Records.
     * @example
     * // Update or create a Records
     * const records = await prisma.records.upsert({
     *   create: {
     *     // ... data to create a Records
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Records we want to update
     *   }
     * })
    **/
    upsert<T extends RecordsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecordsUpsertArgs<ExtArgs>>
    ): Prisma__RecordsClient<$Result.GetResult<Prisma.$RecordsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordsCountArgs} args - Arguments to filter Records to count.
     * @example
     * // Count the number of Records
     * const count = await prisma.records.count({
     *   where: {
     *     // ... the filter for the Records we want to count
     *   }
     * })
    **/
    count<T extends RecordsCountArgs>(
      args?: Subset<T, RecordsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecordsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecordsAggregateArgs>(args: Subset<T, RecordsAggregateArgs>): Prisma.PrismaPromise<GetRecordsAggregateType<T>>

    /**
     * Group by Records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecordsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecordsGroupByArgs['orderBy'] }
        : { orderBy?: RecordsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecordsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecordsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Records model
   */
  readonly fields: RecordsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Records.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecordsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    assignee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    HardwareSystem<T extends HardwareSystemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HardwareSystemDefaultArgs<ExtArgs>>): Prisma__HardwareSystemClient<$Result.GetResult<Prisma.$HardwareSystemPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Records model
   */ 
  interface RecordsFieldRefs {
    readonly id: FieldRef<"Records", 'String'>
    readonly assignee_by_id: FieldRef<"Records", 'String'>
    readonly system_id: FieldRef<"Records", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Records findUnique
   */
  export type RecordsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * Filter, which Records to fetch.
     */
    where: RecordsWhereUniqueInput
  }

  /**
   * Records findUniqueOrThrow
   */
  export type RecordsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * Filter, which Records to fetch.
     */
    where: RecordsWhereUniqueInput
  }

  /**
   * Records findFirst
   */
  export type RecordsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * Filter, which Records to fetch.
     */
    where?: RecordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordsOrderByWithRelationInput | RecordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Records.
     */
    cursor?: RecordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Records.
     */
    distinct?: RecordsScalarFieldEnum | RecordsScalarFieldEnum[]
  }

  /**
   * Records findFirstOrThrow
   */
  export type RecordsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * Filter, which Records to fetch.
     */
    where?: RecordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordsOrderByWithRelationInput | RecordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Records.
     */
    cursor?: RecordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Records.
     */
    distinct?: RecordsScalarFieldEnum | RecordsScalarFieldEnum[]
  }

  /**
   * Records findMany
   */
  export type RecordsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * Filter, which Records to fetch.
     */
    where?: RecordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Records to fetch.
     */
    orderBy?: RecordsOrderByWithRelationInput | RecordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Records.
     */
    cursor?: RecordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Records.
     */
    skip?: number
    distinct?: RecordsScalarFieldEnum | RecordsScalarFieldEnum[]
  }

  /**
   * Records create
   */
  export type RecordsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * The data needed to create a Records.
     */
    data: XOR<RecordsCreateInput, RecordsUncheckedCreateInput>
  }

  /**
   * Records createMany
   */
  export type RecordsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Records.
     */
    data: RecordsCreateManyInput | RecordsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Records createManyAndReturn
   */
  export type RecordsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * The data used to create many Records.
     */
    data: RecordsCreateManyInput | RecordsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Records update
   */
  export type RecordsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * The data needed to update a Records.
     */
    data: XOR<RecordsUpdateInput, RecordsUncheckedUpdateInput>
    /**
     * Choose, which Records to update.
     */
    where: RecordsWhereUniqueInput
  }

  /**
   * Records updateMany
   */
  export type RecordsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Records.
     */
    data: XOR<RecordsUpdateManyMutationInput, RecordsUncheckedUpdateManyInput>
    /**
     * Filter which Records to update
     */
    where?: RecordsWhereInput
  }

  /**
   * Records upsert
   */
  export type RecordsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * The filter to search for the Records to update in case it exists.
     */
    where: RecordsWhereUniqueInput
    /**
     * In case the Records found by the `where` argument doesn't exist, create a new Records with this data.
     */
    create: XOR<RecordsCreateInput, RecordsUncheckedCreateInput>
    /**
     * In case the Records was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecordsUpdateInput, RecordsUncheckedUpdateInput>
  }

  /**
   * Records delete
   */
  export type RecordsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
    /**
     * Filter which Records to delete.
     */
    where: RecordsWhereUniqueInput
  }

  /**
   * Records deleteMany
   */
  export type RecordsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Records to delete
     */
    where?: RecordsWhereInput
  }

  /**
   * Records without action
   */
  export type RecordsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Records
     */
    select?: RecordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    phone_no: 'phone_no',
    name: 'name',
    team: 'team',
    status: 'status',
    access_token: 'access_token',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const HardwareSystemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    descriptions: 'descriptions',
    type: 'type',
    serial_num: 'serial_num',
    assign_id: 'assign_id',
    assignee_by_id: 'assignee_by_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type HardwareSystemScalarFieldEnum = (typeof HardwareSystemScalarFieldEnum)[keyof typeof HardwareSystemScalarFieldEnum]


  export const RecordsScalarFieldEnum: {
    id: 'id',
    assignee_by_id: 'assignee_by_id',
    system_id: 'system_id'
  };

  export type RecordsScalarFieldEnum = (typeof RecordsScalarFieldEnum)[keyof typeof RecordsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Teams'
   */
  export type EnumTeamsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Teams'>
    


  /**
   * Reference to a field of type 'Teams[]'
   */
  export type ListEnumTeamsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Teams[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'HardwareTypes'
   */
  export type EnumHardwareTypesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HardwareTypes'>
    


  /**
   * Reference to a field of type 'HardwareTypes[]'
   */
  export type ListEnumHardwareTypesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HardwareTypes[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    password?: StringFilter<"Employee"> | string
    phone_no?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    team?: EnumTeamsFilter<"Employee"> | $Enums.Teams
    status?: BoolFilter<"Employee"> | boolean
    access_token?: StringNullableFilter<"Employee"> | string | null
    created_at?: DateTimeNullableFilter<"Employee"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Employee"> | Date | string | null
    assigned_item?: HardwareSystemListRelationFilter
    records?: XOR<RecordsNullableRelationFilter, RecordsWhereInput> | null
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_no?: SortOrder
    name?: SortOrder
    team?: SortOrder
    status?: SortOrder
    access_token?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    assigned_item?: HardwareSystemOrderByRelationAggregateInput
    records?: RecordsOrderByWithRelationInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    password?: StringFilter<"Employee"> | string
    phone_no?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    team?: EnumTeamsFilter<"Employee"> | $Enums.Teams
    status?: BoolFilter<"Employee"> | boolean
    access_token?: StringNullableFilter<"Employee"> | string | null
    created_at?: DateTimeNullableFilter<"Employee"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"Employee"> | Date | string | null
    assigned_item?: HardwareSystemListRelationFilter
    records?: XOR<RecordsNullableRelationFilter, RecordsWhereInput> | null
  }, "id" | "email">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_no?: SortOrder
    name?: SortOrder
    team?: SortOrder
    status?: SortOrder
    access_token?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employee"> | string
    email?: StringWithAggregatesFilter<"Employee"> | string
    password?: StringWithAggregatesFilter<"Employee"> | string
    phone_no?: StringWithAggregatesFilter<"Employee"> | string
    name?: StringWithAggregatesFilter<"Employee"> | string
    team?: EnumTeamsWithAggregatesFilter<"Employee"> | $Enums.Teams
    status?: BoolWithAggregatesFilter<"Employee"> | boolean
    access_token?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
  }

  export type HardwareSystemWhereInput = {
    AND?: HardwareSystemWhereInput | HardwareSystemWhereInput[]
    OR?: HardwareSystemWhereInput[]
    NOT?: HardwareSystemWhereInput | HardwareSystemWhereInput[]
    id?: StringFilter<"HardwareSystem"> | string
    name?: StringFilter<"HardwareSystem"> | string
    descriptions?: StringFilter<"HardwareSystem"> | string
    type?: EnumHardwareTypesFilter<"HardwareSystem"> | $Enums.HardwareTypes
    serial_num?: StringFilter<"HardwareSystem"> | string
    assign_id?: StringFilter<"HardwareSystem"> | string
    assignee_by_id?: StringFilter<"HardwareSystem"> | string
    created_at?: DateTimeNullableFilter<"HardwareSystem"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"HardwareSystem"> | Date | string | null
    assignee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    records?: XOR<RecordsNullableRelationFilter, RecordsWhereInput> | null
  }

  export type HardwareSystemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    descriptions?: SortOrder
    type?: SortOrder
    serial_num?: SortOrder
    assign_id?: SortOrder
    assignee_by_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    assignee?: EmployeeOrderByWithRelationInput
    records?: RecordsOrderByWithRelationInput
  }

  export type HardwareSystemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    serial_num?: string
    assign_id?: string
    AND?: HardwareSystemWhereInput | HardwareSystemWhereInput[]
    OR?: HardwareSystemWhereInput[]
    NOT?: HardwareSystemWhereInput | HardwareSystemWhereInput[]
    name?: StringFilter<"HardwareSystem"> | string
    descriptions?: StringFilter<"HardwareSystem"> | string
    type?: EnumHardwareTypesFilter<"HardwareSystem"> | $Enums.HardwareTypes
    assignee_by_id?: StringFilter<"HardwareSystem"> | string
    created_at?: DateTimeNullableFilter<"HardwareSystem"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"HardwareSystem"> | Date | string | null
    assignee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    records?: XOR<RecordsNullableRelationFilter, RecordsWhereInput> | null
  }, "id" | "serial_num" | "assign_id">

  export type HardwareSystemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    descriptions?: SortOrder
    type?: SortOrder
    serial_num?: SortOrder
    assign_id?: SortOrder
    assignee_by_id?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: HardwareSystemCountOrderByAggregateInput
    _max?: HardwareSystemMaxOrderByAggregateInput
    _min?: HardwareSystemMinOrderByAggregateInput
  }

  export type HardwareSystemScalarWhereWithAggregatesInput = {
    AND?: HardwareSystemScalarWhereWithAggregatesInput | HardwareSystemScalarWhereWithAggregatesInput[]
    OR?: HardwareSystemScalarWhereWithAggregatesInput[]
    NOT?: HardwareSystemScalarWhereWithAggregatesInput | HardwareSystemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HardwareSystem"> | string
    name?: StringWithAggregatesFilter<"HardwareSystem"> | string
    descriptions?: StringWithAggregatesFilter<"HardwareSystem"> | string
    type?: EnumHardwareTypesWithAggregatesFilter<"HardwareSystem"> | $Enums.HardwareTypes
    serial_num?: StringWithAggregatesFilter<"HardwareSystem"> | string
    assign_id?: StringWithAggregatesFilter<"HardwareSystem"> | string
    assignee_by_id?: StringWithAggregatesFilter<"HardwareSystem"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"HardwareSystem"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"HardwareSystem"> | Date | string | null
  }

  export type RecordsWhereInput = {
    AND?: RecordsWhereInput | RecordsWhereInput[]
    OR?: RecordsWhereInput[]
    NOT?: RecordsWhereInput | RecordsWhereInput[]
    id?: StringFilter<"Records"> | string
    assignee_by_id?: StringFilter<"Records"> | string
    system_id?: StringFilter<"Records"> | string
    assignee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    HardwareSystem?: XOR<HardwareSystemRelationFilter, HardwareSystemWhereInput>
  }

  export type RecordsOrderByWithRelationInput = {
    id?: SortOrder
    assignee_by_id?: SortOrder
    system_id?: SortOrder
    assignee?: EmployeeOrderByWithRelationInput
    HardwareSystem?: HardwareSystemOrderByWithRelationInput
  }

  export type RecordsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    assignee_by_id?: string
    system_id?: string
    AND?: RecordsWhereInput | RecordsWhereInput[]
    OR?: RecordsWhereInput[]
    NOT?: RecordsWhereInput | RecordsWhereInput[]
    assignee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    HardwareSystem?: XOR<HardwareSystemRelationFilter, HardwareSystemWhereInput>
  }, "id" | "assignee_by_id" | "system_id">

  export type RecordsOrderByWithAggregationInput = {
    id?: SortOrder
    assignee_by_id?: SortOrder
    system_id?: SortOrder
    _count?: RecordsCountOrderByAggregateInput
    _max?: RecordsMaxOrderByAggregateInput
    _min?: RecordsMinOrderByAggregateInput
  }

  export type RecordsScalarWhereWithAggregatesInput = {
    AND?: RecordsScalarWhereWithAggregatesInput | RecordsScalarWhereWithAggregatesInput[]
    OR?: RecordsScalarWhereWithAggregatesInput[]
    NOT?: RecordsScalarWhereWithAggregatesInput | RecordsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Records"> | string
    assignee_by_id?: StringWithAggregatesFilter<"Records"> | string
    system_id?: StringWithAggregatesFilter<"Records"> | string
  }

  export type EmployeeCreateInput = {
    id?: string
    email: string
    password: string
    phone_no: string
    name: string
    team: $Enums.Teams
    status: boolean
    access_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    assigned_item?: HardwareSystemCreateNestedManyWithoutAssigneeInput
    records?: RecordsCreateNestedOneWithoutAssigneeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    phone_no: string
    name: string
    team: $Enums.Teams
    status: boolean
    access_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    assigned_item?: HardwareSystemUncheckedCreateNestedManyWithoutAssigneeInput
    records?: RecordsUncheckedCreateNestedOneWithoutAssigneeInput
  }

  export type EmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: EnumTeamsFieldUpdateOperationsInput | $Enums.Teams
    status?: BoolFieldUpdateOperationsInput | boolean
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_item?: HardwareSystemUpdateManyWithoutAssigneeNestedInput
    records?: RecordsUpdateOneWithoutAssigneeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: EnumTeamsFieldUpdateOperationsInput | $Enums.Teams
    status?: BoolFieldUpdateOperationsInput | boolean
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_item?: HardwareSystemUncheckedUpdateManyWithoutAssigneeNestedInput
    records?: RecordsUncheckedUpdateOneWithoutAssigneeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: string
    email: string
    password: string
    phone_no: string
    name: string
    team: $Enums.Teams
    status: boolean
    access_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type EmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: EnumTeamsFieldUpdateOperationsInput | $Enums.Teams
    status?: BoolFieldUpdateOperationsInput | boolean
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: EnumTeamsFieldUpdateOperationsInput | $Enums.Teams
    status?: BoolFieldUpdateOperationsInput | boolean
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HardwareSystemCreateInput = {
    id?: string
    name: string
    descriptions: string
    type: $Enums.HardwareTypes
    serial_num: string
    assign_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    assignee: EmployeeCreateNestedOneWithoutAssigned_itemInput
    records?: RecordsCreateNestedOneWithoutHardwareSystemInput
  }

  export type HardwareSystemUncheckedCreateInput = {
    id?: string
    name: string
    descriptions: string
    type: $Enums.HardwareTypes
    serial_num: string
    assign_id: string
    assignee_by_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    records?: RecordsUncheckedCreateNestedOneWithoutHardwareSystemInput
  }

  export type HardwareSystemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypesFieldUpdateOperationsInput | $Enums.HardwareTypes
    serial_num?: StringFieldUpdateOperationsInput | string
    assign_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignee?: EmployeeUpdateOneRequiredWithoutAssigned_itemNestedInput
    records?: RecordsUpdateOneWithoutHardwareSystemNestedInput
  }

  export type HardwareSystemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypesFieldUpdateOperationsInput | $Enums.HardwareTypes
    serial_num?: StringFieldUpdateOperationsInput | string
    assign_id?: StringFieldUpdateOperationsInput | string
    assignee_by_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    records?: RecordsUncheckedUpdateOneWithoutHardwareSystemNestedInput
  }

  export type HardwareSystemCreateManyInput = {
    id?: string
    name: string
    descriptions: string
    type: $Enums.HardwareTypes
    serial_num: string
    assign_id: string
    assignee_by_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type HardwareSystemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypesFieldUpdateOperationsInput | $Enums.HardwareTypes
    serial_num?: StringFieldUpdateOperationsInput | string
    assign_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HardwareSystemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypesFieldUpdateOperationsInput | $Enums.HardwareTypes
    serial_num?: StringFieldUpdateOperationsInput | string
    assign_id?: StringFieldUpdateOperationsInput | string
    assignee_by_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RecordsCreateInput = {
    id?: string
    assignee: EmployeeCreateNestedOneWithoutRecordsInput
    HardwareSystem: HardwareSystemCreateNestedOneWithoutRecordsInput
  }

  export type RecordsUncheckedCreateInput = {
    id?: string
    assignee_by_id: string
    system_id: string
  }

  export type RecordsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignee?: EmployeeUpdateOneRequiredWithoutRecordsNestedInput
    HardwareSystem?: HardwareSystemUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type RecordsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignee_by_id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
  }

  export type RecordsCreateManyInput = {
    id?: string
    assignee_by_id: string
    system_id: string
  }

  export type RecordsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type RecordsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignee_by_id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumTeamsFilter<$PrismaModel = never> = {
    equals?: $Enums.Teams | EnumTeamsFieldRefInput<$PrismaModel>
    in?: $Enums.Teams[] | ListEnumTeamsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Teams[] | ListEnumTeamsFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamsFilter<$PrismaModel> | $Enums.Teams
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type HardwareSystemListRelationFilter = {
    every?: HardwareSystemWhereInput
    some?: HardwareSystemWhereInput
    none?: HardwareSystemWhereInput
  }

  export type RecordsNullableRelationFilter = {
    is?: RecordsWhereInput | null
    isNot?: RecordsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HardwareSystemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_no?: SortOrder
    name?: SortOrder
    team?: SortOrder
    status?: SortOrder
    access_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_no?: SortOrder
    name?: SortOrder
    team?: SortOrder
    status?: SortOrder
    access_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_no?: SortOrder
    name?: SortOrder
    team?: SortOrder
    status?: SortOrder
    access_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumTeamsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Teams | EnumTeamsFieldRefInput<$PrismaModel>
    in?: $Enums.Teams[] | ListEnumTeamsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Teams[] | ListEnumTeamsFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamsWithAggregatesFilter<$PrismaModel> | $Enums.Teams
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeamsFilter<$PrismaModel>
    _max?: NestedEnumTeamsFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumHardwareTypesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareTypes | EnumHardwareTypesFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareTypes[] | ListEnumHardwareTypesFieldRefInput<$PrismaModel>
    notIn?: $Enums.HardwareTypes[] | ListEnumHardwareTypesFieldRefInput<$PrismaModel>
    not?: NestedEnumHardwareTypesFilter<$PrismaModel> | $Enums.HardwareTypes
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type HardwareSystemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    descriptions?: SortOrder
    type?: SortOrder
    serial_num?: SortOrder
    assign_id?: SortOrder
    assignee_by_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type HardwareSystemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    descriptions?: SortOrder
    type?: SortOrder
    serial_num?: SortOrder
    assign_id?: SortOrder
    assignee_by_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type HardwareSystemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    descriptions?: SortOrder
    type?: SortOrder
    serial_num?: SortOrder
    assign_id?: SortOrder
    assignee_by_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EnumHardwareTypesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareTypes | EnumHardwareTypesFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareTypes[] | ListEnumHardwareTypesFieldRefInput<$PrismaModel>
    notIn?: $Enums.HardwareTypes[] | ListEnumHardwareTypesFieldRefInput<$PrismaModel>
    not?: NestedEnumHardwareTypesWithAggregatesFilter<$PrismaModel> | $Enums.HardwareTypes
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHardwareTypesFilter<$PrismaModel>
    _max?: NestedEnumHardwareTypesFilter<$PrismaModel>
  }

  export type HardwareSystemRelationFilter = {
    is?: HardwareSystemWhereInput
    isNot?: HardwareSystemWhereInput
  }

  export type RecordsCountOrderByAggregateInput = {
    id?: SortOrder
    assignee_by_id?: SortOrder
    system_id?: SortOrder
  }

  export type RecordsMaxOrderByAggregateInput = {
    id?: SortOrder
    assignee_by_id?: SortOrder
    system_id?: SortOrder
  }

  export type RecordsMinOrderByAggregateInput = {
    id?: SortOrder
    assignee_by_id?: SortOrder
    system_id?: SortOrder
  }

  export type HardwareSystemCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<HardwareSystemCreateWithoutAssigneeInput, HardwareSystemUncheckedCreateWithoutAssigneeInput> | HardwareSystemCreateWithoutAssigneeInput[] | HardwareSystemUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: HardwareSystemCreateOrConnectWithoutAssigneeInput | HardwareSystemCreateOrConnectWithoutAssigneeInput[]
    createMany?: HardwareSystemCreateManyAssigneeInputEnvelope
    connect?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
  }

  export type RecordsCreateNestedOneWithoutAssigneeInput = {
    create?: XOR<RecordsCreateWithoutAssigneeInput, RecordsUncheckedCreateWithoutAssigneeInput>
    connectOrCreate?: RecordsCreateOrConnectWithoutAssigneeInput
    connect?: RecordsWhereUniqueInput
  }

  export type HardwareSystemUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<HardwareSystemCreateWithoutAssigneeInput, HardwareSystemUncheckedCreateWithoutAssigneeInput> | HardwareSystemCreateWithoutAssigneeInput[] | HardwareSystemUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: HardwareSystemCreateOrConnectWithoutAssigneeInput | HardwareSystemCreateOrConnectWithoutAssigneeInput[]
    createMany?: HardwareSystemCreateManyAssigneeInputEnvelope
    connect?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
  }

  export type RecordsUncheckedCreateNestedOneWithoutAssigneeInput = {
    create?: XOR<RecordsCreateWithoutAssigneeInput, RecordsUncheckedCreateWithoutAssigneeInput>
    connectOrCreate?: RecordsCreateOrConnectWithoutAssigneeInput
    connect?: RecordsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumTeamsFieldUpdateOperationsInput = {
    set?: $Enums.Teams
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type HardwareSystemUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<HardwareSystemCreateWithoutAssigneeInput, HardwareSystemUncheckedCreateWithoutAssigneeInput> | HardwareSystemCreateWithoutAssigneeInput[] | HardwareSystemUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: HardwareSystemCreateOrConnectWithoutAssigneeInput | HardwareSystemCreateOrConnectWithoutAssigneeInput[]
    upsert?: HardwareSystemUpsertWithWhereUniqueWithoutAssigneeInput | HardwareSystemUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: HardwareSystemCreateManyAssigneeInputEnvelope
    set?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
    disconnect?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
    delete?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
    connect?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
    update?: HardwareSystemUpdateWithWhereUniqueWithoutAssigneeInput | HardwareSystemUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: HardwareSystemUpdateManyWithWhereWithoutAssigneeInput | HardwareSystemUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: HardwareSystemScalarWhereInput | HardwareSystemScalarWhereInput[]
  }

  export type RecordsUpdateOneWithoutAssigneeNestedInput = {
    create?: XOR<RecordsCreateWithoutAssigneeInput, RecordsUncheckedCreateWithoutAssigneeInput>
    connectOrCreate?: RecordsCreateOrConnectWithoutAssigneeInput
    upsert?: RecordsUpsertWithoutAssigneeInput
    disconnect?: RecordsWhereInput | boolean
    delete?: RecordsWhereInput | boolean
    connect?: RecordsWhereUniqueInput
    update?: XOR<XOR<RecordsUpdateToOneWithWhereWithoutAssigneeInput, RecordsUpdateWithoutAssigneeInput>, RecordsUncheckedUpdateWithoutAssigneeInput>
  }

  export type HardwareSystemUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<HardwareSystemCreateWithoutAssigneeInput, HardwareSystemUncheckedCreateWithoutAssigneeInput> | HardwareSystemCreateWithoutAssigneeInput[] | HardwareSystemUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: HardwareSystemCreateOrConnectWithoutAssigneeInput | HardwareSystemCreateOrConnectWithoutAssigneeInput[]
    upsert?: HardwareSystemUpsertWithWhereUniqueWithoutAssigneeInput | HardwareSystemUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: HardwareSystemCreateManyAssigneeInputEnvelope
    set?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
    disconnect?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
    delete?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
    connect?: HardwareSystemWhereUniqueInput | HardwareSystemWhereUniqueInput[]
    update?: HardwareSystemUpdateWithWhereUniqueWithoutAssigneeInput | HardwareSystemUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: HardwareSystemUpdateManyWithWhereWithoutAssigneeInput | HardwareSystemUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: HardwareSystemScalarWhereInput | HardwareSystemScalarWhereInput[]
  }

  export type RecordsUncheckedUpdateOneWithoutAssigneeNestedInput = {
    create?: XOR<RecordsCreateWithoutAssigneeInput, RecordsUncheckedCreateWithoutAssigneeInput>
    connectOrCreate?: RecordsCreateOrConnectWithoutAssigneeInput
    upsert?: RecordsUpsertWithoutAssigneeInput
    disconnect?: RecordsWhereInput | boolean
    delete?: RecordsWhereInput | boolean
    connect?: RecordsWhereUniqueInput
    update?: XOR<XOR<RecordsUpdateToOneWithWhereWithoutAssigneeInput, RecordsUpdateWithoutAssigneeInput>, RecordsUncheckedUpdateWithoutAssigneeInput>
  }

  export type EmployeeCreateNestedOneWithoutAssigned_itemInput = {
    create?: XOR<EmployeeCreateWithoutAssigned_itemInput, EmployeeUncheckedCreateWithoutAssigned_itemInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAssigned_itemInput
    connect?: EmployeeWhereUniqueInput
  }

  export type RecordsCreateNestedOneWithoutHardwareSystemInput = {
    create?: XOR<RecordsCreateWithoutHardwareSystemInput, RecordsUncheckedCreateWithoutHardwareSystemInput>
    connectOrCreate?: RecordsCreateOrConnectWithoutHardwareSystemInput
    connect?: RecordsWhereUniqueInput
  }

  export type RecordsUncheckedCreateNestedOneWithoutHardwareSystemInput = {
    create?: XOR<RecordsCreateWithoutHardwareSystemInput, RecordsUncheckedCreateWithoutHardwareSystemInput>
    connectOrCreate?: RecordsCreateOrConnectWithoutHardwareSystemInput
    connect?: RecordsWhereUniqueInput
  }

  export type EnumHardwareTypesFieldUpdateOperationsInput = {
    set?: $Enums.HardwareTypes
  }

  export type EmployeeUpdateOneRequiredWithoutAssigned_itemNestedInput = {
    create?: XOR<EmployeeCreateWithoutAssigned_itemInput, EmployeeUncheckedCreateWithoutAssigned_itemInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAssigned_itemInput
    upsert?: EmployeeUpsertWithoutAssigned_itemInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutAssigned_itemInput, EmployeeUpdateWithoutAssigned_itemInput>, EmployeeUncheckedUpdateWithoutAssigned_itemInput>
  }

  export type RecordsUpdateOneWithoutHardwareSystemNestedInput = {
    create?: XOR<RecordsCreateWithoutHardwareSystemInput, RecordsUncheckedCreateWithoutHardwareSystemInput>
    connectOrCreate?: RecordsCreateOrConnectWithoutHardwareSystemInput
    upsert?: RecordsUpsertWithoutHardwareSystemInput
    disconnect?: RecordsWhereInput | boolean
    delete?: RecordsWhereInput | boolean
    connect?: RecordsWhereUniqueInput
    update?: XOR<XOR<RecordsUpdateToOneWithWhereWithoutHardwareSystemInput, RecordsUpdateWithoutHardwareSystemInput>, RecordsUncheckedUpdateWithoutHardwareSystemInput>
  }

  export type RecordsUncheckedUpdateOneWithoutHardwareSystemNestedInput = {
    create?: XOR<RecordsCreateWithoutHardwareSystemInput, RecordsUncheckedCreateWithoutHardwareSystemInput>
    connectOrCreate?: RecordsCreateOrConnectWithoutHardwareSystemInput
    upsert?: RecordsUpsertWithoutHardwareSystemInput
    disconnect?: RecordsWhereInput | boolean
    delete?: RecordsWhereInput | boolean
    connect?: RecordsWhereUniqueInput
    update?: XOR<XOR<RecordsUpdateToOneWithWhereWithoutHardwareSystemInput, RecordsUpdateWithoutHardwareSystemInput>, RecordsUncheckedUpdateWithoutHardwareSystemInput>
  }

  export type EmployeeCreateNestedOneWithoutRecordsInput = {
    create?: XOR<EmployeeCreateWithoutRecordsInput, EmployeeUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutRecordsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type HardwareSystemCreateNestedOneWithoutRecordsInput = {
    create?: XOR<HardwareSystemCreateWithoutRecordsInput, HardwareSystemUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: HardwareSystemCreateOrConnectWithoutRecordsInput
    connect?: HardwareSystemWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutRecordsNestedInput = {
    create?: XOR<EmployeeCreateWithoutRecordsInput, EmployeeUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutRecordsInput
    upsert?: EmployeeUpsertWithoutRecordsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutRecordsInput, EmployeeUpdateWithoutRecordsInput>, EmployeeUncheckedUpdateWithoutRecordsInput>
  }

  export type HardwareSystemUpdateOneRequiredWithoutRecordsNestedInput = {
    create?: XOR<HardwareSystemCreateWithoutRecordsInput, HardwareSystemUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: HardwareSystemCreateOrConnectWithoutRecordsInput
    upsert?: HardwareSystemUpsertWithoutRecordsInput
    connect?: HardwareSystemWhereUniqueInput
    update?: XOR<XOR<HardwareSystemUpdateToOneWithWhereWithoutRecordsInput, HardwareSystemUpdateWithoutRecordsInput>, HardwareSystemUncheckedUpdateWithoutRecordsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumTeamsFilter<$PrismaModel = never> = {
    equals?: $Enums.Teams | EnumTeamsFieldRefInput<$PrismaModel>
    in?: $Enums.Teams[] | ListEnumTeamsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Teams[] | ListEnumTeamsFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamsFilter<$PrismaModel> | $Enums.Teams
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumTeamsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Teams | EnumTeamsFieldRefInput<$PrismaModel>
    in?: $Enums.Teams[] | ListEnumTeamsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Teams[] | ListEnumTeamsFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamsWithAggregatesFilter<$PrismaModel> | $Enums.Teams
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeamsFilter<$PrismaModel>
    _max?: NestedEnumTeamsFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumHardwareTypesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareTypes | EnumHardwareTypesFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareTypes[] | ListEnumHardwareTypesFieldRefInput<$PrismaModel>
    notIn?: $Enums.HardwareTypes[] | ListEnumHardwareTypesFieldRefInput<$PrismaModel>
    not?: NestedEnumHardwareTypesFilter<$PrismaModel> | $Enums.HardwareTypes
  }

  export type NestedEnumHardwareTypesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HardwareTypes | EnumHardwareTypesFieldRefInput<$PrismaModel>
    in?: $Enums.HardwareTypes[] | ListEnumHardwareTypesFieldRefInput<$PrismaModel>
    notIn?: $Enums.HardwareTypes[] | ListEnumHardwareTypesFieldRefInput<$PrismaModel>
    not?: NestedEnumHardwareTypesWithAggregatesFilter<$PrismaModel> | $Enums.HardwareTypes
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHardwareTypesFilter<$PrismaModel>
    _max?: NestedEnumHardwareTypesFilter<$PrismaModel>
  }

  export type HardwareSystemCreateWithoutAssigneeInput = {
    id?: string
    name: string
    descriptions: string
    type: $Enums.HardwareTypes
    serial_num: string
    assign_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    records?: RecordsCreateNestedOneWithoutHardwareSystemInput
  }

  export type HardwareSystemUncheckedCreateWithoutAssigneeInput = {
    id?: string
    name: string
    descriptions: string
    type: $Enums.HardwareTypes
    serial_num: string
    assign_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    records?: RecordsUncheckedCreateNestedOneWithoutHardwareSystemInput
  }

  export type HardwareSystemCreateOrConnectWithoutAssigneeInput = {
    where: HardwareSystemWhereUniqueInput
    create: XOR<HardwareSystemCreateWithoutAssigneeInput, HardwareSystemUncheckedCreateWithoutAssigneeInput>
  }

  export type HardwareSystemCreateManyAssigneeInputEnvelope = {
    data: HardwareSystemCreateManyAssigneeInput | HardwareSystemCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type RecordsCreateWithoutAssigneeInput = {
    id?: string
    HardwareSystem: HardwareSystemCreateNestedOneWithoutRecordsInput
  }

  export type RecordsUncheckedCreateWithoutAssigneeInput = {
    id?: string
    system_id: string
  }

  export type RecordsCreateOrConnectWithoutAssigneeInput = {
    where: RecordsWhereUniqueInput
    create: XOR<RecordsCreateWithoutAssigneeInput, RecordsUncheckedCreateWithoutAssigneeInput>
  }

  export type HardwareSystemUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: HardwareSystemWhereUniqueInput
    update: XOR<HardwareSystemUpdateWithoutAssigneeInput, HardwareSystemUncheckedUpdateWithoutAssigneeInput>
    create: XOR<HardwareSystemCreateWithoutAssigneeInput, HardwareSystemUncheckedCreateWithoutAssigneeInput>
  }

  export type HardwareSystemUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: HardwareSystemWhereUniqueInput
    data: XOR<HardwareSystemUpdateWithoutAssigneeInput, HardwareSystemUncheckedUpdateWithoutAssigneeInput>
  }

  export type HardwareSystemUpdateManyWithWhereWithoutAssigneeInput = {
    where: HardwareSystemScalarWhereInput
    data: XOR<HardwareSystemUpdateManyMutationInput, HardwareSystemUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type HardwareSystemScalarWhereInput = {
    AND?: HardwareSystemScalarWhereInput | HardwareSystemScalarWhereInput[]
    OR?: HardwareSystemScalarWhereInput[]
    NOT?: HardwareSystemScalarWhereInput | HardwareSystemScalarWhereInput[]
    id?: StringFilter<"HardwareSystem"> | string
    name?: StringFilter<"HardwareSystem"> | string
    descriptions?: StringFilter<"HardwareSystem"> | string
    type?: EnumHardwareTypesFilter<"HardwareSystem"> | $Enums.HardwareTypes
    serial_num?: StringFilter<"HardwareSystem"> | string
    assign_id?: StringFilter<"HardwareSystem"> | string
    assignee_by_id?: StringFilter<"HardwareSystem"> | string
    created_at?: DateTimeNullableFilter<"HardwareSystem"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"HardwareSystem"> | Date | string | null
  }

  export type RecordsUpsertWithoutAssigneeInput = {
    update: XOR<RecordsUpdateWithoutAssigneeInput, RecordsUncheckedUpdateWithoutAssigneeInput>
    create: XOR<RecordsCreateWithoutAssigneeInput, RecordsUncheckedCreateWithoutAssigneeInput>
    where?: RecordsWhereInput
  }

  export type RecordsUpdateToOneWithWhereWithoutAssigneeInput = {
    where?: RecordsWhereInput
    data: XOR<RecordsUpdateWithoutAssigneeInput, RecordsUncheckedUpdateWithoutAssigneeInput>
  }

  export type RecordsUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    HardwareSystem?: HardwareSystemUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type RecordsUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeCreateWithoutAssigned_itemInput = {
    id?: string
    email: string
    password: string
    phone_no: string
    name: string
    team: $Enums.Teams
    status: boolean
    access_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    records?: RecordsCreateNestedOneWithoutAssigneeInput
  }

  export type EmployeeUncheckedCreateWithoutAssigned_itemInput = {
    id?: string
    email: string
    password: string
    phone_no: string
    name: string
    team: $Enums.Teams
    status: boolean
    access_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    records?: RecordsUncheckedCreateNestedOneWithoutAssigneeInput
  }

  export type EmployeeCreateOrConnectWithoutAssigned_itemInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutAssigned_itemInput, EmployeeUncheckedCreateWithoutAssigned_itemInput>
  }

  export type RecordsCreateWithoutHardwareSystemInput = {
    id?: string
    assignee: EmployeeCreateNestedOneWithoutRecordsInput
  }

  export type RecordsUncheckedCreateWithoutHardwareSystemInput = {
    id?: string
    assignee_by_id: string
  }

  export type RecordsCreateOrConnectWithoutHardwareSystemInput = {
    where: RecordsWhereUniqueInput
    create: XOR<RecordsCreateWithoutHardwareSystemInput, RecordsUncheckedCreateWithoutHardwareSystemInput>
  }

  export type EmployeeUpsertWithoutAssigned_itemInput = {
    update: XOR<EmployeeUpdateWithoutAssigned_itemInput, EmployeeUncheckedUpdateWithoutAssigned_itemInput>
    create: XOR<EmployeeCreateWithoutAssigned_itemInput, EmployeeUncheckedCreateWithoutAssigned_itemInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutAssigned_itemInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutAssigned_itemInput, EmployeeUncheckedUpdateWithoutAssigned_itemInput>
  }

  export type EmployeeUpdateWithoutAssigned_itemInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: EnumTeamsFieldUpdateOperationsInput | $Enums.Teams
    status?: BoolFieldUpdateOperationsInput | boolean
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    records?: RecordsUpdateOneWithoutAssigneeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutAssigned_itemInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: EnumTeamsFieldUpdateOperationsInput | $Enums.Teams
    status?: BoolFieldUpdateOperationsInput | boolean
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    records?: RecordsUncheckedUpdateOneWithoutAssigneeNestedInput
  }

  export type RecordsUpsertWithoutHardwareSystemInput = {
    update: XOR<RecordsUpdateWithoutHardwareSystemInput, RecordsUncheckedUpdateWithoutHardwareSystemInput>
    create: XOR<RecordsCreateWithoutHardwareSystemInput, RecordsUncheckedCreateWithoutHardwareSystemInput>
    where?: RecordsWhereInput
  }

  export type RecordsUpdateToOneWithWhereWithoutHardwareSystemInput = {
    where?: RecordsWhereInput
    data: XOR<RecordsUpdateWithoutHardwareSystemInput, RecordsUncheckedUpdateWithoutHardwareSystemInput>
  }

  export type RecordsUpdateWithoutHardwareSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignee?: EmployeeUpdateOneRequiredWithoutRecordsNestedInput
  }

  export type RecordsUncheckedUpdateWithoutHardwareSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignee_by_id?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeCreateWithoutRecordsInput = {
    id?: string
    email: string
    password: string
    phone_no: string
    name: string
    team: $Enums.Teams
    status: boolean
    access_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    assigned_item?: HardwareSystemCreateNestedManyWithoutAssigneeInput
  }

  export type EmployeeUncheckedCreateWithoutRecordsInput = {
    id?: string
    email: string
    password: string
    phone_no: string
    name: string
    team: $Enums.Teams
    status: boolean
    access_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    assigned_item?: HardwareSystemUncheckedCreateNestedManyWithoutAssigneeInput
  }

  export type EmployeeCreateOrConnectWithoutRecordsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutRecordsInput, EmployeeUncheckedCreateWithoutRecordsInput>
  }

  export type HardwareSystemCreateWithoutRecordsInput = {
    id?: string
    name: string
    descriptions: string
    type: $Enums.HardwareTypes
    serial_num: string
    assign_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    assignee: EmployeeCreateNestedOneWithoutAssigned_itemInput
  }

  export type HardwareSystemUncheckedCreateWithoutRecordsInput = {
    id?: string
    name: string
    descriptions: string
    type: $Enums.HardwareTypes
    serial_num: string
    assign_id: string
    assignee_by_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type HardwareSystemCreateOrConnectWithoutRecordsInput = {
    where: HardwareSystemWhereUniqueInput
    create: XOR<HardwareSystemCreateWithoutRecordsInput, HardwareSystemUncheckedCreateWithoutRecordsInput>
  }

  export type EmployeeUpsertWithoutRecordsInput = {
    update: XOR<EmployeeUpdateWithoutRecordsInput, EmployeeUncheckedUpdateWithoutRecordsInput>
    create: XOR<EmployeeCreateWithoutRecordsInput, EmployeeUncheckedCreateWithoutRecordsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutRecordsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutRecordsInput, EmployeeUncheckedUpdateWithoutRecordsInput>
  }

  export type EmployeeUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: EnumTeamsFieldUpdateOperationsInput | $Enums.Teams
    status?: BoolFieldUpdateOperationsInput | boolean
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_item?: HardwareSystemUpdateManyWithoutAssigneeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_no?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: EnumTeamsFieldUpdateOperationsInput | $Enums.Teams
    status?: BoolFieldUpdateOperationsInput | boolean
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigned_item?: HardwareSystemUncheckedUpdateManyWithoutAssigneeNestedInput
  }

  export type HardwareSystemUpsertWithoutRecordsInput = {
    update: XOR<HardwareSystemUpdateWithoutRecordsInput, HardwareSystemUncheckedUpdateWithoutRecordsInput>
    create: XOR<HardwareSystemCreateWithoutRecordsInput, HardwareSystemUncheckedCreateWithoutRecordsInput>
    where?: HardwareSystemWhereInput
  }

  export type HardwareSystemUpdateToOneWithWhereWithoutRecordsInput = {
    where?: HardwareSystemWhereInput
    data: XOR<HardwareSystemUpdateWithoutRecordsInput, HardwareSystemUncheckedUpdateWithoutRecordsInput>
  }

  export type HardwareSystemUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypesFieldUpdateOperationsInput | $Enums.HardwareTypes
    serial_num?: StringFieldUpdateOperationsInput | string
    assign_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignee?: EmployeeUpdateOneRequiredWithoutAssigned_itemNestedInput
  }

  export type HardwareSystemUncheckedUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypesFieldUpdateOperationsInput | $Enums.HardwareTypes
    serial_num?: StringFieldUpdateOperationsInput | string
    assign_id?: StringFieldUpdateOperationsInput | string
    assignee_by_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HardwareSystemCreateManyAssigneeInput = {
    id?: string
    name: string
    descriptions: string
    type: $Enums.HardwareTypes
    serial_num: string
    assign_id: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type HardwareSystemUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypesFieldUpdateOperationsInput | $Enums.HardwareTypes
    serial_num?: StringFieldUpdateOperationsInput | string
    assign_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    records?: RecordsUpdateOneWithoutHardwareSystemNestedInput
  }

  export type HardwareSystemUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypesFieldUpdateOperationsInput | $Enums.HardwareTypes
    serial_num?: StringFieldUpdateOperationsInput | string
    assign_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    records?: RecordsUncheckedUpdateOneWithoutHardwareSystemNestedInput
  }

  export type HardwareSystemUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    descriptions?: StringFieldUpdateOperationsInput | string
    type?: EnumHardwareTypesFieldUpdateOperationsInput | $Enums.HardwareTypes
    serial_num?: StringFieldUpdateOperationsInput | string
    assign_id?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EmployeeCountOutputTypeDefaultArgs instead
     */
    export type EmployeeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeDefaultArgs instead
     */
    export type EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HardwareSystemDefaultArgs instead
     */
    export type HardwareSystemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HardwareSystemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecordsDefaultArgs instead
     */
    export type RecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecordsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}